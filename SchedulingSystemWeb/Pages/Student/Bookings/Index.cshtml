@page
@model SchedulingSystemWeb.Pages.Student.Bookings.IndexModel
@using System.Globalization
@{
    ViewData["Title"] = "Booking Calendar";
    var firstDayOfMonth = new DateTime(Model.CurrentDate.Year, Model.CurrentDate.Month, 1);
    var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
    int daysInMonth = DateTime.DaysInMonth(Model.CurrentDate.Year, Model.CurrentDate.Month);
    int firstDayOfWeek = (int)CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;
    int currentDayOfWeek = (int)firstDayOfMonth.DayOfWeek;
    int leadingDays = (currentDayOfWeek - firstDayOfWeek + 7) % 7;
    var user = @Model.profFullName;
}

<h2 class="text-primary">@ViewData["Title"]</h2>
<form method="get" id="filter" class="mt-3">
    <div class="row">
        <div class="col-md-4">
            <select name="role" class="form-select" required>
                <option value="">Select Role</option>
                @foreach (var role in Model.Roles)
                {
                    if (role.Name != "STUDENT" && role.Name != "ADMIN")
                    {
                        if(role.Name == HttpContext.Session.GetString("SearchRole"))
                        {
                            <option value="@role.Name" selected>@role.Name</option>
                        }
                        else
                        {
                            <option value="@role.Name">@role.Name</option>
                        }
                    }        
                }
            </select>
        </div>
        <div class="col-md-4">
            <select name="department" class="form-select" required>
                <option value="">--- Department ---</option>
                @foreach(var d in Model.departmentList)
                {
                    if(d.Id == HttpContext.Session.GetInt32("SearchDepartment"))
                    {
                        <option value="@d.Id" selected>@d.Name</option>
                    }
                    else
                    {
                        <option value="@d.Id">@d.Name</option>
                    }
                }
            </select>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-md-4">
            <select name="providerUserId" class="form-select">
                <option value="">----</option>
                <option value="">All Providers</option>
                @foreach(var prov in Model.ApplicationUserList)
                {
                    <option value="@prov.Id">@prov.FullName</option>
                }
            </select>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-md-6">
            @foreach (var location in Model.locationTypesList)
            {
                <div class="form-check">
                    <input type="checkbox" name="locationTypeId" value="@location.Id" class="form-check-input" id="location-@location.Id">
                    <label class="form-check-label" for="location-@location.Id">@location.LocationTypeName</label>
                </div>
            }
        </div>
    </div>

    <div class="row mt-3">
        <div class="col-md-4">
            <button type="submit" class="btn btn-primary">Filter</button>
        </div>
    </div>
</form>
d

<br />
<br />
<label>Categories</label>
<div id="categoriesBox">
    @foreach (var category in Model.ViewCategories)
    {
        <div class="form-check form-check-inline">
            <label class="form-check-label" for="category-@category.Id">
                <span style="display: inline-block; width: 15px; height: 15px; background-color: @category.Color; margin-right: 5px;"></span>
                @category.Name
            </label>
        </div>
    }
</div>
<!-- Tab navigation buttons -->
<ul class="nav nav-tabs" id="calendarTabs" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#weekly" type="button" role="tab" aria-controls="weekly" aria-selected="true" id="weekly-tab">Weekly</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" data-bs-toggle="tab" data-bs-target="#monthly" type="button" role="tab" aria-controls="monthly" aria-selected="false" id="monthly-tab">Monthly</button>
    </li>
</ul>


<!-- Tab content -->
<div class="tab-content" id="calendarTabsContent">
    <!-- Weekly Schedule Tab -->
    <div class="tab-pane fade show active" id="weekly" role="tabpanel" aria-labelledby="weekly-tab">
        <div class="container">
            <!-- Weekly Calendar and its navigation buttons -->
            <div class="container">
                <!-- Weekly Calendar -->
                <br>
                <button type="button" class="btn btn-primary" style="float: right; margin-left: 10px;" onclick="location.href='?handler=NextWeek'">Next Week</button>
                <button type="button" class="btn btn-primary" style="float: right; margin-left: 10px;" onclick="location.href='?handler=PreviousWeek'">Previous Week</button>
               
                <button type="button" class="btn btn-secondary" style="float: right;" id="todayWeek">Today</button>
                @if (Model.WeekDays.Any())
{
                    var firstDay = Model.WeekDays.First();
                    var lastDay = Model.WeekDays.Last();
                    string displayWeek;

                    if (firstDay.Month != lastDay.Month)
                    {
                        // Week spans two different months
                        displayWeek = firstDay.ToString("MMMM dd") + " - " + lastDay.ToString("MMMM dd");
                    }
                    else
                    {
                        // Week is within the same month
                        displayWeek = firstDay.ToString("MMMM") + " Week of " + firstDay.ToString("dd") + " - " + lastDay.ToString("dd");
                    }

                    <h3>@displayWeek</h3>
                }
                else
                {
                    <h3>@Model.CurrentMonthName</h3>
                }

                <table class="calendar">
                    <thead>
                        <tr class="week-header">
                            <th class="time-header">Time</th>
                            @foreach (var day in Model.WeekDays)
                            {
                                <th class="day-header @((day.Date == DateTime.Today) ? "today" : "")">
                                    @day.ToString("ddd dd")
                                </th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                    @{
                        int startHour = 0; // Default start hour
                        int endHour = 24;  // Default end hour

                        if (Model.provWorkingStartHours != null && Model.provWorkingEndHours != null)
                        {
                            startHour = Model.provWorkingStartHours.Value.Hour;
                            endHour = Model.provWorkingEndHours.Value.Hour;
                        }
                    }
                    @for (var hour = startHour; hour < endHour; hour++)
                    {
                        for (var minute = 0; minute < 60; minute += 30) // Increment by 30 minutes
                        {
                            <tr class="week-row">
                                <td class="hour">@hour:@(minute.ToString("00"))</td>
                                @foreach (var day in Model.WeekDays)
                                {
                                    // Example date for the start of the time slot
                                    var timeSlotStart = new DateTime(day.Year, day.Month, day.Day, hour, minute, 0);
                                    var timeSlotEnd = timeSlotStart.AddMinutes(30); // End of the time slot

                                    <td class="hour-cell @((day.Date == DateTime.Today) ? "today" : "")">
                                        @* Display bookings for the day and time slot *@
                                        @* @foreach (var booking in Model.ViewBookings.Where(b => b.StartTime >= timeSlotStart && b.StartTime < timeSlotEnd))
                                        {
                                            <div class="booking-event">@booking.Subject @booking.StartTime.ToString("HH:mm")</div>
                                        } *@
                                        @* Display availabilities for the day and time slot *@
                                        @foreach (var availability in Model.ViewAvailabilities.Where(a => a.StartTime >= timeSlotStart && a.StartTime < timeSlotEnd && !Model.IsAvailabilityBooked(a)))
                                        {
                                            var categoryColors = Model.GetCategoryColors(availability.Category);
                                            string style = "";
                                            string textColor = "black";
                                            if (categoryColors.Count == 1)
                                            {
                                                var color = categoryColors.First();
                                                style = $"background-color: {color};";
                                                textColor = Model.GetTextColor(color);
                                            }
                                            else if (categoryColors.Count > 1)
                                            {
                                                int colorCount = categoryColors.Count;
                                                float percentagePerColor = 100f / colorCount;
                                                style = "background: repeating-linear-gradient(to right, ";

                                                for (int i = 0; i < colorCount; i++)
                                                {
                                                    var color = categoryColors[i];
                                                    var startPercent = i * percentagePerColor;
                                                    var endPercent = (i + 1) * percentagePerColor;
                                                    style += $"{color} {startPercent}%, {color} {endPercent}%";
                                                    if (i < colorCount - 1)
                                                    {
                                                        style += ", ";
                                                    }
                                                }
                                                style += ");";
                                                textColor = Model.GetTextColor(categoryColors[0]);
                                            }
                                            <a asp-page="/Student/Bookings/Upsert" asp-route-id="@availability.Id" class="availability-link">
                                                <div class="card mb-3" style="@style; color: @textColor;">
                                                    <div class="card-header">@availability.ProviderFullName</div>
                                                    <div class="card-body">
                                                        @availability.StartTime.ToString("HH:mm") - @availability.EndTime.ToString("HH:mm")
                                                    </div>
                                                </div>
                                            </a>
                                            <br>
                                        }
                                    </td>
                                }
                            </tr>
                        }
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
    <!-- Monthly Schedule Tab -->
    <div class="tab-pane fade" id="monthly" role="tabpanel" aria-labelledby="monthly-tab">
        <div class="container">
            <!-- Monthly Calendar and its navigation buttons -->
             <div class="container">
                <!-- Monthly Calendar -->
                <br />
                <button type="button" class="btn btn-primary" style="float: right; margin-left: 10px;" onclick="location.href='?handler=NextMonth'">Next Month</button>
                <button type="button" class="btn btn-primary" style="float: right; margin-left: 10px;" onclick="location.href='?handler=PreviousMonth'">Previous Month</button>               
                <button type="button" class="btn btn-secondary" style="float: right;" id="todayMonth">Today</button>
                <h3>@Model.CurrentMonthName @Model.CurrentDate.Year</h3>
                <table id="monthly-calendar" class="calendar">
                    <thead>
                        <tr class="month-header">
                            @for (int i = 0; i < 7; i++)
                            {
                                <th class="day-header">
                                    @CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName((DayOfWeek)((firstDayOfWeek + i) % 7))
                                </th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                       @for (int i = 0; i < leadingDays + daysInMonth; i++)
                    {
                        if (i % 7 == 0)
                        {
                            @:<tr class="week-row">
                        }

                        if (i < leadingDays)
                        {
                            <td class="empty-day"></td>
                        }
                        else
                        {
                            var currentDay = firstDayOfMonth.AddDays(i - leadingDays);
                            <td class="month-day @(currentDay.Date == DateTime.Today.Date ? "today" : "")">
                                 <div class="combined-container" style="max-height: 30vh; overflow: auto;">
                                @currentDay.Day
                                <!-- Display bookings for the day -->
                               @*  @foreach(var booking in Model.ViewBookings.Where(b => b.StartTime.Date == currentDay))
                                {
                                    <div class="booking-event">@booking.Subject @booking.StartTime.ToString("HH:mm")</div>
                                } *@
                                <!-- Display availabilities for the day -->
                                @foreach(var availability in Model.ViewAvailabilities.Where(a => a.StartTime.Date == currentDay && !Model.IsAvailabilityBooked(a)))
                                {
                                    var categoryColors = Model.GetCategoryColors(availability.Category);
                                    string style = "";
                                    string textColor = "black";
                                    if (categoryColors.Count == 1)
                                    {
                                        var color = categoryColors.First();
                                        style = $"background-color: {color};";
                                        textColor = Model.GetTextColor(color);
                                    }
                                    else if (categoryColors.Count > 1)
                                    {
                                        int colorCount = categoryColors.Count;
                                        float percentagePerColor = 100f / colorCount;
                                        style = "background: repeating-linear-gradient(to right, ";

                                        for (int j = 0; j < colorCount; j++)
                                        {
                                            var color = categoryColors[j];
                                            var startPercent = j * percentagePerColor;
                                            var endPercent = (j + 1) * percentagePerColor;
                                            style += $"{color} {startPercent}%, {color} {endPercent}%";
                                            if (j < colorCount - 1)
                                            {
                                                style += ", ";
                                            }
                                        }
                                        style += ");";
                                        textColor = Model.GetTextColor(categoryColors[0]);
                                    }
                                    <a asp-page="/Student/Bookings/Upsert" asp-route-id="@availability.Id" class="availability-link">
                                        <div class="card mb-3" style="@style; color: @textColor;">
                                            <div class="card-header">@availability.ProviderFullName</div>
                                            <div class="card-body">
                                                @availability.StartTime.ToString("HH:mm") - @availability.EndTime.ToString("HH:mm")
                                            </div>
                                        </div>
                                    </a>
                                    <br>
                                }
                                </div>
                            </td>
                        }

                        if ((i + 1) % 7 == 0)
                        {
                            @:</tr>
                        }
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
        // Retrieve the activeTab value from ViewData or default to 'weekly'
        const activeTab = '@ViewData["ActiveTab"]' || 'weekly';

        // Initialize tab buttons
        const weeklyTab = document.querySelector('#weekly-tab');
        const monthlyTab = document.querySelector('#monthly-tab');

        // Function to switch tabs
        function switchTab(tabName) {
            // Reset active states
            [weeklyTab, monthlyTab].forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-pane').forEach(pane => {
                pane.classList.remove('show', 'active');
            });

            // Set the selected tab and pane as active
            document.querySelector(`#${tabName}-tab`).classList.add('active');
            document.querySelector(`#${tabName}`).classList.add('show', 'active');

            // Store the selected tab name in sessionStorage for persistence
            sessionStorage.setItem('activeTab', tabName);
        }

        // Event listeners for tab buttons
        weeklyTab.addEventListener('click', () => switchTab('weekly'));
        monthlyTab.addEventListener('click', () => switchTab('monthly'));

        // Check sessionStorage or use the activeTab value and activate the corresponding tab
        const storedTab = sessionStorage.getItem('activeTab') || activeTab;
        switchTab(storedTab);
    });
    </script>

    @* <script>
document.addEventListener('DOMContentLoaded', function() {
    const tabs = {
        'weekly': document.querySelector('#weekly-tab'),
        'monthly': document.querySelector('#monthly-tab')
    };
    const tabContents = {
        'weekly': document.querySelector('#weekly'),
        'monthly': document.querySelector('#monthly')
    };
    const todayButtons = {
        'weekly': document.querySelector('#todayWeek'),
        'monthly': document.querySelector('#todayMonth')
    };

    function switchTab(activeTab) {
        // Store active tab in session
        sessionStorage.setItem('activeTab', activeTab);

        Object.keys(tabs).forEach(tab => {
            if (tab === activeTab) {
                tabs[tab].classList.add('active');
                tabContents[tab].classList.add('show', 'active');
            } else {
                tabs[tab].classList.remove('active');
                tabContents[tab].classList.remove('show', 'active');
            }
        });
    }
    tabs.weekly.addEventListener('click', () => switchTab('weekly'));
    tabs.monthly.addEventListener('click', () => switchTab('monthly'));

    todayButtons.weekly.addEventListener('click', () => {
        // TODO: Logic to bring the weekly view to today's date
    });
    todayButtons.monthly.addEventListener('click', () => {
        // TODO: Logic to bring the monthly view to today's date
    });


    const storedTab = sessionStorage.getItem('activeTab') || 'weekly';
    switchTab(storedTab);

    // Today button based on the active tab
    document.querySelector('.btn-secondary').addEventListener('click', function() {
        const activeTab = sessionStorage.getItem('activeTab');
        if (activeTab === 'weekly') {
            // TODO: Implement logic for jumping to the current week
        } else if (activeTab === 'monthly') {
            // TODO: Implement logic for jumping to the current month
        }
        // TODO update UI
    });
});
</script> *@


    @* <script>
        document.getElementById("roleDropdown").addEventListener('change', function(){
            document.getElementById('filter').submit();
        });
    </script>
    <script>
        document.getElementById("providerFilter").addEventListener('change', function(){
            document.getElementById('filter').submit();
        });
    </script> *@
}