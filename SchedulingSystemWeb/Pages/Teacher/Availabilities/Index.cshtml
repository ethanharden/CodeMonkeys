@page
@model SchedulingSystemWeb.Pages.Availabilities.IndexModel
@using System.Globalization
@{
    ViewData["Title"] = "Availability Calendar";
    var firstDayOfMonth = new DateTime(Model.CurrentDate.Year, Model.CurrentDate.Month, 1);
    var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
    int daysInMonth = DateTime.DaysInMonth(Model.CurrentDate.Year, Model.CurrentDate.Month);
    int firstDayOfWeek = (int)CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;
    int currentDayOfWeek = (int)firstDayOfMonth.DayOfWeek;
    int leadingDays = (currentDayOfWeek - firstDayOfWeek + 7) % 7;
}

<h2 class="text-primary">@ViewData["Title"]</h2>

<div>
    <h4>Upcoming Bookings</h4>
    @if (Model.nextBookings.Any())
    {
        
        <div class="container">
            <div class="row">
                @foreach (var booking in Model.nextBookings)
                {
                     <div class="col-md-4">
                        <div class="card">
                            <div class="card-body">
                                    
                                        
                                <p class="card-title">Subject: @booking.Subject</p>
                                <hr />
                                <p class="card-text">Date: @booking.StartTime.ToShortDateString()</p>
                                <p class="card-text">@booking.StartTime.ToShortTimeString() - @booking.StartTime.AddMinutes(booking.Duration).ToShortTimeString()</p>
                                <a asp-page="/Teacher/Appointments/Index" asp-route-id="@booking.Id" class="btn btn-primary">More Info</a>       
                                    
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <p>No upcoming bookings found.</p>
    }
</div>

<label>Categories</label>
<div id="categoriesBox">
    @foreach (var category in Model.categoryList)
    {
        <div class="form-check form-check-inline">
            <label class="form-check-label" for="category-@category.Id">
                <span style="display: inline-block; width: 15px; height: 15px; background-color: @category.Color; margin-right: 5px;"></span>
                @category.Name
            </label>
        </div>
    }
</div>


<!-- Tab navigation buttons -->
<ul class="nav nav-tabs" id="calendarTabs" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="weekly-tab" data-bs-toggle="tab" data-bs-target="#weekly" type="button" role="tab" aria-controls="weekly" aria-selected="true">Weekly</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="monthly-tab" data-bs-toggle="tab" data-bs-target="#monthly" type="button" role="tab" aria-controls="monthly" aria-selected="false">Monthly</button>
    </li>
</ul>
<!-- Tab content -->
<div class="tab-content" id="calendarTabsContent">
    <!-- Weekly Schedule Tab -->
    <div class="tab-pane fade show active" id="weekly" role="tabpanel" aria-labelledby="weekly-tab">
        <div class="container">
            <!-- Weekly Calendar and its navigation buttons -->
            <div class="container">
                <!-- Weekly Calendar -->
                <br>
                <button type="button" class="btn btn-success mb-3" onclick="window.location.href='@Url.Page("/Teacher/Availabilities/Upsert")'">
                    Create Availability
                </button>
                <button type="button" class="btn btn-primary" style="float: right; margin-left: 10px;" onclick="location.href='?handler=NextWeek'">Next Week</button>
                <button type="button" class="btn btn-primary" style="float: right; margin-left: 10px;" onclick="location.href='?handler=PreviousWeek'">Previous Week</button>
               
                <button type="button" class="btn btn-secondary" style="float: right;" onclick="location.href='?handler=TodayWeek'">Today</button>
                @if (Model.WeekDays.Any())
{
                    var firstDay = Model.WeekDays.First();
                    var lastDay = Model.WeekDays.Last();
                    string displayWeek;

                    if (firstDay.Month != lastDay.Month)
                    {
                        // Week spans two different months
                        displayWeek = firstDay.ToString("MMMM dd") + " - " + lastDay.ToString("MMMM dd");
                    }
                    else
                    {
                        // Week is within the same month
                        displayWeek = firstDay.ToString("MMMM") + " Week of " + firstDay.ToString("dd") + " - " + lastDay.ToString("dd");
                    }

                    <h3>@displayWeek</h3>
                }
                else
                {
                    <h3>@Model.CurrentMonthName</h3>
                }
                @{
                    int startHour = 0; // Default start hour
                    int endHour = 24;  // Default end hour

                    if (Model.provWorkingStartHours != null && Model.provWorkingEndHours != null)
                    {
                        startHour = Model.provWorkingStartHours.Value.Hour;
                        endHour = Model.provWorkingEndHours.Value.Hour;
                    }
                }
                <table class="calendar">
                    <thead>
                        <tr class="week-header">
                            <th class="time-header">Time</th>
                            @foreach (var day in Model.WeekDays)
                            {
                                <th class="day-header @((day.Date == DateTime.Today) ? "today" : "")">
                                    @day.ToString("ddd dd")
                                </th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                    @for (var hour = startHour; hour < endHour; hour++)
                            {
                                for (var minute = 0; minute < 60; minute += 30)
                                {
                                <tr class="week-row">
                                    <td class="hour">@hour:@(minute.ToString("00"))</td>
                                        @foreach (var day in Model.WeekDays)
                                        {
                                            <td class="hour-cell @((day.Date == DateTime.Today) ? "today" : "")">
                                                @{
                                                    // Define the start and end of the current half-hour slot
                                                    var slotStart = new DateTime(day.Year, day.Month, day.Day, hour, minute, 0);
                                                    var slotEnd = slotStart.AddMinutes(30);
                                                }

                                                <!-- Display bookings for the day and hour -->
                                                @foreach(var booking in Model.ViewBookings.Where(b => b.StartTime.Date == day.Date && b.StartTime >= slotStart && b.StartTime < slotEnd))
                                                {
                                                    string style = "";
                                                    string textColor = "black";
                                                    if (booking.CategoryID != null)
                                                    {
                                                        var color = Model.GetBookingColors(booking.CategoryID);
                                                        style = $"background-color: {color}; border: 4px solid #4C0E7D;";
                                                        textColor = Model.GetTextColor(color);
                                                        style += ");";
                                                    }
                                                    else
                                                    {
                                                        var color = "#4C0E7D";
                                                        style = $"background-color: {color}; border: 4px solid #000000;";
                                                        textColor = Model.GetTextColor(color);
                                                        style += ");";
                                                    }

                                                    <div class="card mb-3" style="@style; color: @textColor;">
                                                        <div class="card-header">@booking.Subject</div>
                                                        <div class="card-body">
                                                            @booking.StartTime.ToShortTimeString()
                                                            @Model.GetUserName(booking.User)
                                                        </div>
                                                    </div>
                                                }
                                                @foreach(var availability in Model.ViewAvailabilities.Where(a => a.StartTime.Date == day.Date && a.StartTime >= slotStart && a.StartTime < slotEnd && a.EndTime > a.StartTime && !Model.IsAvailabilityBooked(a)))
                                                {
                                                    var categoryColors = Model.GetCategoryColors(availability.Category);
                                                    string style = "";
                                                    string textColor = "black";
                                                    if (categoryColors.Count == 1)
                                                    {
                                                        var color = categoryColors.First();
                                                        style = $"background-color: {color};";
                                                        textColor = Model.GetTextColor(color);
                                                    }
                                                    else if (categoryColors.Count > 1)
                                                    {
                                                        int colorCount = categoryColors.Count;
                                                        float percentagePerColor = 100f / colorCount;
                                                        style = "background: repeating-linear-gradient(to right, ";

                                                        for (int i = 0; i < colorCount; i++)
                                                        {
                                                            var color = categoryColors[i];
                                                            var startPercent = i * percentagePerColor;
                                                            var endPercent = (i + 1) * percentagePerColor;
                                                            style += $"{color} {startPercent}%, {color} {endPercent}%";
                                                            if (i < colorCount - 1)
                                                            {
                                                                style += ", ";
                                                            }
                                                        }
                                                        style += ");";
                                                        textColor = Model.GetTextColor(categoryColors[0]);
                                                    }
                                                    <a asp-page="/Teacher/Availabilities/Upsert" asp-route-id="@availability.Id" class="availability-link">
                                                        <div class="card mb-3" style="@style; color: @textColor;">
                                                            <div class="card-header">Available</div>
                                                            <div class="card-body">
                                                                @availability.StartTime.ToString("HH:mm") - @availability.EndTime.ToString("HH:mm")
                                                            </div>
                                                        </div>
                                                    </a>
                                                }
                                
                                            </td>
                                        }
                                    </tr>
                                }
                            }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    
 <!-- Monthly Schedule Tab -->
<div class="tab-pane fade" id="monthly" role="tabpanel" aria-labelledby="monthly-tab">
    <div class="container">
        <!-- Monthly Calendar and its navigation buttons -->
        <div class="container">
            <!-- Monthly Calendar -->
            <br />
            <button type="button" class="btn btn-success mb-3" onclick="window.location.href='@Url.Page("/Teacher/Availabilities/Upsert")'">
                Create Availability
            </button>
            <button type="button" class="btn btn-primary" style="float: right; margin-left: 10px;" onclick="location.href='?handler=NextMonth'">Next Month</button>
            <button type="button" class="btn btn-primary" style="float: right; margin-left: 10px;" onclick="location.href='?handler=PreviousMonth'">Previous Month</button>               
            <button type="button" class="btn btn-secondary" style="float: right;" onclick="location.href='?handler=TodayMonth'">Today</button>
            <h3>@Model.CurrentMonthName @Model.CurrentDate.Year</h3>
            <div class="table-responsive"> <!-- Added a container for the table to make it scrollable -->
                <table id="monthly-calendar" class="calendar table table-bordered">
                    <thead>
                        <tr class="month-header">
                            @for (int i = 0; i < 7; i++)
                            {
                                <th class="day-header">
                                    @CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName((DayOfWeek)((firstDayOfWeek + i) % 7))
                                </th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                       @for (int i = 0; i < leadingDays + daysInMonth; i++)
                        {
                            if (i % 7 == 0)
                            {
                                @:<tr class="week-row">
                            }

                            if (i < leadingDays)
                            {
                                <td class="empty-day"></td>
                            }
                            else
                            {
                                var currentDay = firstDayOfMonth.AddDays(i - leadingDays);
                                <td class="month-day @(currentDay.Date == DateTime.Today.Date ? "today" : "")">
                                    @currentDay.Day
                                    <!-- Display bookings for the day -->
                                    <div class="combined-container" style="max-height: 30vh; overflow: auto;">
                                        @foreach(var booking in Model.Bookings.Where(b => b.StartTime.Date == currentDay))
                                        {

                                            string style = "";
                                            string textColor = "black";
                                            if (booking.CategoryID != null)
                                            {
                                                var color = Model.GetBookingColors(booking.CategoryID);
                                                style = $"background-color: {color}; border: 4px solid #4C0E7D;";
                                                textColor = Model.GetTextColor(color);
                                                style += ");";
                                            }
                                            else
                                            {
                                                var color = "#4C0E7D";
                                                style = $"background-color: {color}; border: 4px solid #000000;";
                                                textColor = Model.GetTextColor(color);
                                                style += ");";
                                            }
                                                @* else if (categoryColors.Count > 1)
                                            {
                                                int colorCount = categoryColors.Count;
                                                float percentagePerColor = 100f / colorCount;
                                                style = "background: repeating-linear-gradient(to right, ";

                                                for (int j = 0; j < colorCount; j++)
                                                {
                                                    var color = categoryColors[j];
                                                    var startPercent = j * percentagePerColor;
                                                    var endPercent = (j + 1) * percentagePerColor;
                                                    style += $"{color} {startPercent}%, {color} {endPercent}%";
                                                    if (j < colorCount - 1)
                                                    {
                                                        style += ", ";
                                                    }
                                                }
                                                style += "); border: 10px solid #4C0E7D;";
                                                textColor = Model.GetTextColor(categoryColors[0]);
                                            } *@

                                            <a asp-page="/Teacher/Appointments/Index" asp-route-id="@booking.Id">
                                                
                                                    <div class="card mb-3" style="@style; color: @textColor;">
                                                    <div class="card-header">@booking.Subject</div>
                                                    <div class="card-body">
                                                        @booking.StartTime.ToShortTimeString()
                                                        @Model.GetUserName(booking.User)
                                                    </div>
                                                </div>                                              
                                            </a>
                                        }

                                        <!-- Display availabilities for the day -->
                                        @foreach(var availability in Model.Availabilities.Where(a => a.StartTime.Date == currentDay && !Model.IsAvailabilityBooked(a)))
                                        {
                                            var categoryColors = Model.GetCategoryColors(availability.Category);
                                            string style = "";
                                            string textColor = "black";
                                            if (categoryColors.Count == 1)
                                            {
                                                var color = categoryColors.First();
                                                style = $"background-color: {color};";
                                                textColor = Model.GetTextColor(color);
                                            }
                                            else if (categoryColors.Count > 1)
                                            {
                                                int colorCount = categoryColors.Count;
                                                float percentagePerColor = 100f / colorCount;
                                                style = "background: repeating-linear-gradient(to right, ";

                                                for (int j = 0; j < colorCount; j++)
                                                {
                                                    var color = categoryColors[j];
                                                    var startPercent = j * percentagePerColor;
                                                    var endPercent = (j + 1) * percentagePerColor;
                                                    style += $"{color} {startPercent}%, {color} {endPercent}%";
                                                    if (j < colorCount - 1)
                                                    {
                                                        style += ", ";
                                                    }
                                                }
                                                style += ");";
                                                textColor = Model.GetTextColor(categoryColors[0]);
                                            }
                                            <a asp-page="/Teacher/Availabilities/Upsert" asp-route-id="@availability.Id" class="availability-link">
                                                <div class="card mb-3" style="@style; color: @textColor;">
                                                    <div class="card-header">Available</div>
                                                    <div class="card-body">
                                                        @availability.StartTime.ToString("HH:mm") - @availability.EndTime.ToString("HH:mm")
                                                    </div>
                                                </div>
                                            </a>
                                        }
                                     </div>
                                 </td>
                            }

                            if ((i + 1) % 7 == 0)
                            {
                                @:</tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Handle the tab switching and also call the Today handler
        document.querySelectorAll('.nav-link').forEach(function(navLink) {
            navLink.addEventListener('click', function (e) {
                let currentTab = new bootstrap.Tab(navLink);
                currentTab.show();

                // Check the id of the clicked tab and call the respective Today handler
                if (navLink.id === 'weekly-tab') {
                    window.location.href = '?handler=Today';
                } else if (navLink.id === 'monthly-tab') {
                    window.location.href = '?handler=TodayMonth';
                }

                e.preventDefault();
            });
        });

        // Original code to set the active tab on page load based on TempData
        document.addEventListener('DOMContentLoaded', (event) => {
            let activeTab = '@TempData["ActiveTab"]';
            if (activeTab === "monthly") {
                new bootstrap.Tab(document.querySelector('#monthly-tab')).show();
            } else {
                new bootstrap.Tab(document.querySelector('#weekly-tab')).show();
            }
        });
    </script>
    <script>
        document.querySelectorAll('.availability-link').forEach(function(availabilityLink) {
            availabilityLink.addEventListener('dblclick', function() {
                window.location.href = this.getAttribute('href');
            });
        });
    </script>
}