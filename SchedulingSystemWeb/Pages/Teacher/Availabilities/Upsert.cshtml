@page
@model SchedulingSystemWeb.Pages.Availabilities.UpsertModel
@using System.Globalization
@using System.Linq
@{
    ViewData["Title"] = Model.objAvailability.Id == 0 ? "Create Availability" : "Edit Availability";
    var firstDayOfMonth = new DateTime(Model.CurrentDate.Year, Model.CurrentDate.Month, 1);
    var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
    int daysInMonth = DateTime.DaysInMonth(Model.CurrentDate.Year, Model.CurrentDate.Month);
    int firstDayOfWeek = (int)CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;
    int currentDayOfWeek = (int)firstDayOfMonth.DayOfWeek;
    int leadingDays = (currentDayOfWeek - firstDayOfWeek + 7) % 7;
}

<h4>Availability</h4>

@if (TempData["Errors"] is List<string> errors && errors.Count > 0)
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in errors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<div class="row">
    <div class="col-md-6">
        <!-- Form goes here -->
        <div class="col-md-6">
        <form method="post">
            <!-- Hidden field for Id -->
            <input type="hidden" asp-for="objAvailability.Id" />
            <input type="hidden" asp-for="objAvailability.ProviderProfileID" />
   @*          <input asp-for="objAvailability.ProviderProfile.UserId" type="hidden" /> *@
        
            <!-- Start Time -->
            <div class="form-group">
                <label asp-for="objAvailability.StartTime" class="control-label"></label>
                <input asp-for="objAvailability.StartTime" class="form-control" type="datetime-local" value="@Model.objAvailability.StartTime.ToString("yyyy-MM-ddTHH:mm")" />
                <span asp-validation-for="objAvailability.StartTime" class="text-danger"></span>
            </div>

            <!-- End Time -->
            <div class="form-group">
                <label asp-for="objAvailability.EndTime" class="control-label"></label>
                <input asp-for="objAvailability.EndTime" class="form-control" type="datetime-local" value="@Model.objAvailability.EndTime.ToString("yyyy-MM-ddTHH:mm")" />
                <span asp-validation-for="objAvailability.EndTime" class="text-danger"></span>
            </div>

            <!-- Duration -->
            <div class="form-group">
                <label for="duration" class="control-label">Duration</label>
                <select id="duration" class="form-control">
                    @for (int i = 15; i <= 300; i += 15)
                    {
                        <option value="@i">@TimeSpan.FromMinutes(i).ToString(@"hh\:mm")</option>
                    }
                </select>
            </div>

            <!-- Days of Week -->
            <div class="form-group">
                <label class="control-label">Days of Week</label>
                @{
                    var dayOfWeekValues = Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>();
                    foreach (var day in dayOfWeekValues)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" name="SelectedDaysOfWeek" value="@day" />
                            <label class="form-check-label">@day.ToString()</label>
                        </div>
                    }
                }
            </div>

            <!--Recurring section-->
            <div class="form-group">
                <label  class="control-label">Recurring</label>
                <input  class="form-check-input" type="checkbox" id="recurringCheckbox" />
            </div>

            <div class="form-group" id="recurringEndDateGroup" style="display:none;">
                <label  class="control-label">Recurring End Date</label>
                <input  class="form-control" type="date" />
                <span @* asp-validation-for="objAvailability.RecurringEndDate" *@ class="text-danger"></span>
            </div>

            <!-- Submit button -->
            <button type="submit" class="btn btn-primary">Save</button>
        </form>
        </div>
    </div>
    <!--Calendar-->
    <div class="col-md-6">
        <h2 class="text-primary">@ViewData["Title"]</h2>

        <!-- Tab navigation buttons -->
        <ul class="nav nav-tabs" id="calendarTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="weekly-tab" data-bs-toggle="tab" data-bs-target="#weekly" type="button" role="tab" aria-controls="weekly" aria-selected="true">Weekly</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="monthly-tab" data-bs-toggle="tab" data-bs-target="#monthly" type="button" role="tab" aria-controls="monthly" aria-selected="false">Monthly</button>
            </li>
        </ul>
        <!-- Tab content -->
        <div class="tab-content" id="calendarTabsContent">
            <!-- Weekly Schedule Tab -->
            <div class="tab-pane fade show active" id="weekly" role="tabpanel" aria-labelledby="weekly-tab">
                <div class="container">
                    <!-- Weekly Calendar and its navigation buttons -->
                    <div class="container">
                        <!-- Weekly Calendar -->
                        <br>
                        <button type="button" class="btn btn-primary" style="float: right; margin-left: 10px;" onclick="location.href='?handler=NextWeek&id=@Model.objAvailability.Id'">Next Week</button>
                        <button type="button" class="btn btn-primary" style="float: right; margin-left: 10px;" onclick="location.href='?handler=PreviousWeek&id=@Model.objAvailability.Id'">Previous Week</button>
               
                        <button type="button" class="btn btn-secondary" style="float: right;" onclick="location.href='?handler=TodayWeek&id=@Model.objAvailability.Id'">Today</button>
                        @if (Model.WeekDays.Any())
                        {
                            var firstDay = Model.WeekDays.First();
                            var lastDay = Model.WeekDays.Last();
                            string displayWeek;

                            if (firstDay.Month != lastDay.Month)
                            {
                                // Week spans two different months
                                displayWeek = firstDay.ToString("MMMM dd") + " - " + lastDay.ToString("MMMM dd");
                            }
                            else
                            {
                                // Week is within the same month
                                displayWeek = firstDay.ToString("MMMM") + " Week of " + firstDay.ToString("dd") + " - " + lastDay.ToString("dd");
                            }

                            <h3>@displayWeek</h3>
                        }
                        else
                        {
                            <h3>@Model.CurrentMonthName</h3>
                        }

                        <table class="calendar">
                            <thead>
                                <tr class="week-header">
                                    <th class="time-header">Time</th>
                                    @foreach (var day in Model.WeekDays)
                                    {
                                        <th class="day-header @((day.Date == DateTime.Today) ? "today" : "")">
                                            @day.ToString("ddd dd")
                                        </th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @for (var hour = 0; hour < 24; hour++)
                            {
                                <tr class="week-row">
                                    <td class="hour">@hour:00</td>
                                    @foreach (var day in Model.WeekDays)
                                    {
                                        <td class="hour-cell @((day.Date == DateTime.Today) ? "today" : "")">
                                            <!-- Display bookings for the day and hour -->
                                           @*  @foreach(var booking in Model.ViewBookings.Where(b => b.StartTime.Date == day.Date && b.StartTime.Hour == hour))
                                            {
                                                <div class="booking-event" style="background-color: grey; color: white; cursor: pointer;"
                                                     onclick="showBookingDetails('@booking.Subject', '@booking.StartTime.ToString("dddd, MMMM dd, yyyy HH:mm")')">
                                                  @booking.Subject @booking.StartTime.ToString("HH:mm") - @booking.StartTime.AddMinutes(booking.Duration).ToString("HH:mm")
                                                </div>
                                            } *@
                                            <!-- Display availabilities for the day and hour -->
                                             @foreach(var availability in Model.Availabilities.Where(a => a.StartTime.Date == day.Date && a.StartTime.Hour <= hour && a.EndTime.Hour > hour) /* && !Model.IsAvailabilityBooked(a) */)
                                            {
                                                <div class="card text-white bg-success mb-3">
                                                    <div class="card-header">Available</div>
                                                    <div class="card-body">
                                                        @availability.StartTime.ToString("HH:mm") - @availability.EndTime.ToString("HH:mm")
                                                    </div>
                                                    <br>
                                                </div>
                                            }
                                        </td>
                                    }
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
    
            <!-- Monthly Schedule Tab -->
            <div class="tab-pane fade" id="monthly" role="tabpanel" aria-labelledby="monthly-tab">
                <div class="container">
                    <!-- Monthly Calendar and its navigation buttons -->
                     <div class="container">
                        <!-- Monthly Calendar -->
                        <br />
                        <button type="button" class="btn btn-primary" style="float: right; margin-left: 10px;" onclick="location.href='?handler=NextMonth&id=@Model.objAvailability.Id'">Next Month</button>
                        <button type="button" class="btn btn-primary" style="float: right; margin-left: 10px;" onclick="location.href='?handler=PreviousMonth&id=@Model.objAvailability.Id'">Previous Month</button>               
                        <button type="button" class="btn btn-secondary" style="float: right;" onclick="location.href='?handler=TodayMonth&id=@Model.objAvailability.Id'">Today</button>
                        <h3>@Model.CurrentMonthName @Model.CurrentDate.Year</h3>
                        <table id="monthly-calendar" class="calendar">
                            <thead>
                                <tr class="month-header">
                                    @for (int i = 0; i < 7; i++)
                                    {
                                        <th class="day-header">
                                            @CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName((DayOfWeek)((firstDayOfWeek + i) % 7))
                                        </th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                            @for (int i = 0; i < leadingDays + daysInMonth; i++)
                            {
                                if (i % 7 == 0)
                                {
                                    @:<tr class="week-row">
                                }

                                if (i < leadingDays)
                                {
                                    <td class="empty-day"></td>
                                }
                                else
                                {
                                    var currentDay = firstDayOfMonth.AddDays(i - leadingDays);
                                    <td class="month-day @(currentDay.Date == DateTime.Today.Date ? "today" : "")">
                                        @currentDay.Day
                                        <!--Bookings-->
                                        @* @foreach(var booking in Model.ViewBookings.Where(b => b.StartTime.Date == currentDay))
                                        {
                                            <div class="booking-event" style="background-color: grey; color: white; cursor: pointer;"
                                                 onclick="showBookingDetails('@booking.Subject', '@booking.StartTime.ToString("dddd, MMMM dd, yyyy HH:mm")')">
                                              @booking.Subject @booking.StartTime.ToString("HH:mm") - @booking.StartTime.AddMinutes(booking.Duration).ToString("HH:mm")
                                            </div>
                                        } *@
                                        <!-- Display availabilities for the day -->
                                        @if(Model.ViewAvailabilities != null)
                                        {
                                            @foreach(var availability in Model.ViewAvailabilities.Where(a => a.StartTime.Date == currentDay) /* && !Model.IsAvailabilityBooked(a) */)
                                            {
                                            @* <a asp-page="/Availabilities/Upsert" asp-route-id="@availability.Id" class="card-link"> *@
                                                <div class="card text-white bg-success mb-3">
                                                    <div class="card-header">Available</div>
                                                    <div class="card-body">
                                                        @availability.StartTime.ToString("HH:mm") - @availability.EndTime.ToString("HH:mm")
                                                    </div>
                                                    <br>
                                                </div>
                                            @* </a> *@
                                            }
                                        }                          
                                        </td>
                                }

                                if ((i + 1) % 7 == 0)
                                {
                                    @:</tr>
                                }
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js"></script>
    <!--Tab switching-->
    <script>
    // Handle the tab switching
        document.querySelectorAll('.nav-link').forEach(function(navLink) {
            navLink.addEventListener('click', function(e) {
                let currentTab = new bootstrap.Tab(navLink);
                currentTab.show();

                let availabilityId = '@Model.objAvailability.Id';
                let handler = (navLink.id === 'weekly-tab') ? 'TodayWeek' : 'TodayMonth';
                let urlParams = new URLSearchParams(window.location.search);
            
                // Use the URLSearchParams to handle the query string
                urlParams.set('handler', handler);
            
                // Check if there's a valid ID to append
                if (availabilityId && availabilityId !== '0') {
                    urlParams.set('id', availabilityId);
                } else {
                    urlParams.delete('id'); // Make sure to remove id if it's not valid
                }

                // Construct the URL with the search parameters
                let url = `${window.location.pathname}?${urlParams.toString()}`;
                window.location.href = url;
                e.preventDefault();
            });
        });

        // Original code to set the active tab on page load based on TempData
        document.addEventListener('DOMContentLoaded', (event) => {
            let activeTab = '@TempData["ActiveTab"]';
            if (activeTab === "monthly") {
                new bootstrap.Tab(document.querySelector('#monthly-tab')).show();
            } else {
                new bootstrap.Tab(document.querySelector('#weekly-tab')).show();
            }
        });
    </script>
    <!--Recurring -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            function toggleRecurringEndDate() {
                var recurringCheckbox = document.getElementById('recurringCheckbox');
                var recurringEndDateGroup = document.getElementById('recurringEndDateGroup');
                var recurringEndDateInput = document.getElementById('objAvailability_RecurringEndDate');

                if (recurringCheckbox.checked) {
                    recurringEndDateGroup.style.display = 'block';
                } else {
                    recurringEndDateGroup.style.display = 'none';
                    // Clear the value of the recurring end date when the checkbox is unchecked
                    recurringEndDateInput.value = '';
                }
            }

            var recurringCheckbox = document.getElementById('recurringCheckbox');
            recurringCheckbox.addEventListener('change', toggleRecurringEndDate);

            // reload page if recurring is checked when editing
            toggleRecurringEndDate();
        });
    </script>
    <!--Duration/ EndTime-->
    <script>
        // Update EndTime
        function updateEndTime() {
            var startTime = document.getElementById('objAvailability_StartTime').value;
            var duration = document.getElementById('duration').value;
            if (startTime) {
                var startTimeDate = new Date(startTime);
                var endTimeDate = new Date(startTimeDate.getTime() + parseInt(duration) * 60000);
                document.getElementById('endTime').value = endTimeDate.toISOString().slice(0, 16);
            }
        }

        // Event listener for StartTime
        document.getElementById('objAvailability_StartTime').addEventListener('change', updateEndTime);
        document.getElementById('duration').addEventListener('change', updateEndTime);

        updateEndTime();

        // Toggle RecurringEndDate
        var recurringCheckbox = document.getElementById('recurring');
        var recurringEndDateGroup = document.getElementById('recurringEndDateGroup');

        function toggleRecurringEndDate() {
            recurringEndDateGroup.style.display = recurringCheckbox.checked ? 'block' : 'none';
        }

        recurringCheckbox.addEventListener('change', toggleRecurringEndDate);

        //initial display
        toggleRecurringEndDate();
    });
    </script>
    <!--Show Booking Details-->
    <script>
        function showBookingDetails(subject, startTime) {
            var modalBody = document.querySelector('#bookingDetailsModal .modal-body');
            modalBody.innerHTML = `<p><strong>Subject:</strong> ${subject}</p><p><strong>Start Time:</strong> ${startTime}</p>`;
            var bookingDetailsModal = new bootstrap.Modal(document.getElementById('bookingDetailsModal'));
            bookingDetailsModal.show();
        }
    </script>
    <!--Sweet Alert-->
    <script>
    $(document).ready(function() {
        var formStatus = '@TempData["FormStatus"]';
        var errorMessage = '@TempData["ErrorMessage"]';

        if (formStatus === "Failed" && errorMessage) {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: errorMessage,
            });
        }
    });
    </script>
}