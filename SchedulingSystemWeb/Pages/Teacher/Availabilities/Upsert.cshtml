@page
@model SchedulingSystemWeb.Pages.Availabilities.UpsertModel
@using System.Globalization
@using System.Linq
@{
    ViewData["Title"] = Model.objAvailability.Id == 0 ? "Create Availability" : "Edit Availability";
    var firstDayOfMonth = new DateTime(Model.CurrentDate.Year, Model.CurrentDate.Month, 1);
    var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
    int daysInMonth = DateTime.DaysInMonth(Model.CurrentDate.Year, Model.CurrentDate.Month);
    int firstDayOfWeek = (int)CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;
    int currentDayOfWeek = (int)firstDayOfMonth.DayOfWeek;
    int leadingDays = (currentDayOfWeek - firstDayOfWeek + 7) % 7;
}

<h4>Availability</h4>

@if (TempData["Errors"] is List<string> errors && errors.Count > 0)
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in errors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<div class="row">
    <div class="col-md-6">
        <!-- Form goes here -->
        <div class="col-md-6">
        <form method="post">
            <!-- Hidden field for Id -->
            <input type="hidden" asp-for="objAvailability.Id" />
            <input type="hidden" asp-for="objAvailability.ProviderProfileID" />
        
            <!-- Date -->
            <div class="form-group">
                <label for="meetingDate" class="control-label">Date</label>
                <input id="meetingDate" name="MeetingDate" type="date" class="form-control" value="@Model.objAvailability.StartTime.ToString("yyyy-MM-dd")" />
            <span asp-validation-for="MeetingDate" class="text-danger"></span>
            </div>

            <!-- Start Time -->
            <div class="form-group">
                <label asp-for="MeetingStartTime" class="control-label">Start Time</label>
                <input asp-for="MeetingStartTime" class="form-control" type="time" />
                <span asp-validation-for="MeetingStartTime" class="text-danger"></span>
            </div>

            <!-- End Time -->
            <div class="form-group">
                <label asp-for="MeetingEndTime" class="control-label">End Time</label>
                <input asp-for="MeetingEndTime" class="form-control" type="time" />
                <span asp-validation-for="MeetingEndTime" class="text-danger"></span>
            </div>


            <!-- Duration -->
            <div class="form-group">
            <label for="duration" class="control-label">Duration</label>
                <select id="duration" class="form-control" >
                    @for (int i = 30; i <= 200; i += 30)
                    {
                        <option value="@i">@TimeSpan.FromMinutes(i).ToString(@"hh\:mm")</option>
                    }
                </select>
            </div>


            <!-- Days of Week Section-->
            <br />
            <div class="form-check">
                <label class="form-check-label" for="multipleDaysCheckbox">
                    Multiple Days of the Week
                </label>
                <input class="form-check-input" type="checkbox" id="multipleDaysCheckbox" name="multipleDaysCheckbox">    
            </div>
            <div class="form-group" id="daysOfWeekGroup" style="display:none;">
                <label class="control-label">Days of Week</label>
                @{
                    var dayOfWeekValues = Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>();
                    foreach (var day in dayOfWeekValues)
                    {
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" name="SelectedDaysOfWeek" value="@day" />
                            <label class="form-check-label">@day.ToString()</label>
                        </div>
                    }
                }
            </div>
            <br />

            <!--Recurring section-->
            <div class="form-group">
                <input  asp-for="recurringCheckbox" class="form-check-input" type="checkbox" id="recurringCheckbox" name="recurringCheckbox"/>
                <label  class="control-label">Recurring</label>
               
            </div>
            <div>
                <div class="form-group" style="display:none;" id="recurringTypeGroup">
                    <label for="SelectedRecurringTypeId" class="control-label">Recurring Type</label>
                    <select id="SelectedRecurringTypeId" name="SelectedRecurringTypeId" class="form-control">
                        <option value="">Select Recurring Type</option>
                        @foreach(var type in Model.RecurringTypes)
                        {
                            <option value="@type.Id">@type.Name</option>
                        }
                    </select>
                </div>
            </div>

            <div class="form-group" id="recurringEndDateGroup" style="display:none;">
                <label  class="control-label">Recurring End Date</label>
                <input  asp-for="recurringCheckbox" class="form-control" type="date" name="RecurringEndDate" />
                <span @* asp-validation-for="objAvailability.RecurringEndDate" *@ class="text-danger"></span>
            </div>
            <br />
            
            <div class="form-group">
                <label for="location">Location</label>
                <select asp-for="objAvailability.LocationId" class="form-control" required>
                    <option value="">-- Select Location --</option>
                
                    @foreach (var loc in Model.locationLIst)
                    {
                     <option value="@loc.LocationId" class="text-danger"> @loc.LocationName -- @loc.BuildingName</option>
                    }    
                </select>
            </div>
            <br />

            <!-- Categories -->
            <div class="form-group">
                <label>Categories</label>
                <div id="categoriesBox">
                    @foreach (var category in Model.AllCategories)
                    {
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="checkbox" name="CategoryIds" id="category-@category.Id" value="@category.Id">
                            <label class="form-check-label" for="category-@category.Id">
                                <span style="display: inline-block; width: 15px; height: 15px; background-color: @category.Color; margin-right: 5px;"></span>
                                @category.Name
                            </label>
                        </div>
                    }
                </div>
                <!-- Container for dynamically added categories -->
                @* <div id="newCategoryContainer"></div>
                <br />
                <!-- Button to add a new category row -->               
                <br />
                <div id="addingCategory" style="display:none;">
                    <div class="mb-3">
                        <label for="Name" class="form-label">Name</label>
                        <input type="text" class="form-control" id="Name" name="Name" required>
                    </div>
                    <div class="mb-3">
                        <label for="Color" class="form-label">Color</label>
                        <input type="color" class="form-control form-control-color" id="Color" name="Color" required value="#563d7c" title="Choose your color">
                    </div>
                </div>
                <button type="button" id="addCategoryButton" class="btn btn-primary btn-sm"> new category </button> *@
            </div>
            <br />
            <br />

            <!-- Submit button -->
            <button type="submit" class="btn btn-primary">Save</button>
            @if(Model.objAvailability.Id != 0)
            {
                    <a class="btn btn-danger" asp-page="Delete" asp-route-id="@Model.objAvailability.Id">Delete</a>
                }
        </form>
        </div>
    </div>
    <!--Calendar-->
    <div class="col-md-6">
        <h2 class="text-primary">@ViewData["Title"]</h2>

        <!-- Tab navigation buttons -->
        <ul class="nav nav-tabs" id="calendarTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="weekly-tab" data-bs-toggle="tab" data-bs-target="#weekly" type="button" role="tab" aria-controls="weekly" aria-selected="true">Weekly</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="monthly-tab" data-bs-toggle="tab" data-bs-target="#monthly" type="button" role="tab" aria-controls="monthly" aria-selected="false">Monthly</button>
            </li>
        </ul>
        <!-- Tab content -->
        <div class="tab-content" id="calendarTabsContent">
            <!-- Weekly Schedule Tab -->
            <div class="tab-pane fade show active" id="weekly" role="tabpanel" aria-labelledby="weekly-tab">
                <div class="container">
                    <!-- Weekly Calendar and its navigation buttons -->
                    <div class="container">
                        <!-- Weekly Calendar -->
                        <br>
                        <button type="button" class="btn btn-primary" style="float: right; margin-left: 10px;" onclick="location.href='?handler=NextWeek&id=@Model.objAvailability.Id'">Next Week</button>
                        <button type="button" class="btn btn-primary" style="float: right; margin-left: 10px;" onclick="location.href='?handler=PreviousWeek&id=@Model.objAvailability.Id'">Previous Week</button>
               
                        <button type="button" class="btn btn-secondary" style="float: right;" onclick="location.href='?handler=TodayWeek&id=@Model.objAvailability.Id'">Today</button>
                        @if (Model.WeekDays.Any())
                        {
                            var firstDay = Model.WeekDays.First();
                            var lastDay = Model.WeekDays.Last();
                            string displayWeek;

                            if (firstDay.Month != lastDay.Month)
                            {
                                // Week spans two different months
                                displayWeek = firstDay.ToString("MMMM dd") + " - " + lastDay.ToString("MMMM dd");
                            }
                            else
                            {
                                // Week is within the same month
                                displayWeek = firstDay.ToString("MMMM") + " Week of " + firstDay.ToString("dd") + " - " + lastDay.ToString("dd");
                            }

                            <h3>@displayWeek</h3>
                        }
                        else
                        {
                            <h3>@Model.CurrentMonthName</h3>
                        }

                        <table class="calendar">
                            <thead>
                                <tr class="week-header">
                                    <th class="time-header">Time</th>
                                    @foreach (var day in Model.WeekDays)
                                    {
                                        <th class="day-header @((day.Date == DateTime.Today) ? "today" : "")">
                                            @day.ToString("ddd dd")
                                        </th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                            @{
                                int startHour = 0; // Default start hour
                                int endHour = 24;  // Default end hour

                                if (Model.provWorkingStartHours != null && Model.provWorkingEndHours != null)
                                {
                                    startHour = Model.provWorkingStartHours.Value.Hour;
                                    endHour = Model.provWorkingEndHours.Value.Hour;
                                }
                            }
                            @for (var hour = startHour; hour < endHour; hour++)
                            {
                                for (var minute = 0; minute < 60; minute += 30)
                                {
                                <tr class="week-row">
                                    <td class="hour">@hour:@(minute.ToString("00"))</td>
                                        @foreach (var day in Model.WeekDays)
                                        {
                                            <td class="hour-cell @((day.Date == DateTime.Today) ? "today" : "")">
                                                <!-- Display bookings for the day and hour -->
                                                @foreach(var booking in Model.ViewBookings.Where(b => b.StartTime.Date == day.Date && b.StartTime.Hour == hour))
                                                {
                                                    string style = "";
                                                    string textColor = "black";
                                                    if (booking.CategoryID != null)
                                                    {
                                                        var color = Model.GetBookingColors(booking.CategoryID);
                                                        style = $"background-color: {color}; border: 4px solid #4C0E7D;";
                                                        textColor = Model.GetTextColor(color);
                                                        style += ");";
                                                    }
                                                    else
                                                    {
                                                        var color = "#4C0E7D";
                                                        style = $"background-color: {color}; border: 4px solid #000000;";
                                                        textColor = Model.GetTextColor(color);
                                                        style += ");";
                                                    }

                                                    <div class="card mb-3" style="@style; color: @textColor;">
                                                        <div class="card-header">@booking.Subject</div>
                                                        <div class="card-body">
                                                            @booking.StartTime.ToShortTimeString()
                                                            @Model.GetUserName(booking.User)
                                                        </div>
                                                    </div>

                                                    @* <div class="booking-event" style="background-color: grey; color: white; cursor: pointer;"
                                                         onclick="showBookingDetails('@booking.Subject', '@booking.StartTime.ToString("dddd, MMMM dd, yyyy HH:mm")')">
                                                      @booking.Subject @booking.StartTime.ToString("HH:mm") - @booking.StartTime.AddMinutes(booking.Duration).ToString("HH:mm")
                                                    </div> *@
                                                }
                                                <!-- Display availabilities for the day and hour -->
                                                 @* @foreach(var availability in Model.Availabilities.Where(a => a.StartTime.Date == day.Date && a.StartTime.Hour <= hour && a.EndTime.Hour > hour  && !Model.IsAvailabilityBooked(a)))
                                                {
                                                    <div class="card text-white bg-success mb-3">
                                                        <div class="card-header">Available</div>
                                                        <div class="card-body">
                                                            @availability.StartTime.ToString("HH:mm") - @availability.EndTime.ToString("HH:mm")
                                                        </div>
                                                        <br>
                                                    </div>
                                                } *@
                                            @foreach(var availability in Model.Availabilities.Where(a => a.StartTime.Date == day.Date && a.StartTime.Hour <= hour && a.EndTime.Hour > hour && !Model.IsAvailabilityBooked(a)))
                                            {
                                                var categoryColors = Model.GetCategoryColors(availability.Category);
                                                string style = "";
                                                string textColor = "black";
                                                if (categoryColors.Count == 1)
                                                {
                                                    var color = categoryColors.First();
                                                    style = $"background-color: {color};";
                                                    textColor = Model.GetTextColor(color);
                                                }
                                                else if (categoryColors.Count > 1)
                                                {
                                                    int colorCount = categoryColors.Count;
                                                    float percentagePerColor = 100f / colorCount;
                                                    style = "background: repeating-linear-gradient(to right, ";

                                                    for (int i = 0; i < colorCount; i++)
                                                    {
                                                        var color = categoryColors[i];
                                                        var startPercent = i * percentagePerColor;
                                                        var endPercent = (i + 1) * percentagePerColor;
                                                        style += $"{color} {startPercent}%, {color} {endPercent}%";
                                                        if (i < colorCount - 1)
                                                        {
                                                            style += ", ";
                                                        }
                                                    }
                                                    style += ");";
                                                    textColor = Model.GetTextColor(categoryColors[0]);
                                                }
                                                <a asp-page="/Teacher/Availabilities/Upsert" asp-route-id="@availability.Id" class="availability-link">
                                                    <div class="card mb-3" style="@style; color: @textColor;">
                                                        <div class="card-header">Available</div>
                                                        <div class="card-body">
                                                            @availability.StartTime.ToString("HH:mm") - @availability.EndTime.ToString("HH:mm")
                                                        </div>
                                                    </div>
                                                </a>
                                            }
                                
                                            </td>
                                        }
                                    </tr>
                                }
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
    
            <!-- Monthly Schedule Tab -->
            <div class="tab-pane fade" id="monthly" role="tabpanel" aria-labelledby="monthly-tab">
                <div class="container">
                    <!-- Monthly Calendar and its navigation buttons -->
                     <div class="container">
                        <!-- Monthly Calendar -->
                        <br />
                        <button type="button" class="btn btn-primary" style="float: right; margin-left: 10px;" onclick="location.href='?handler=NextMonth&id=@Model.objAvailability.Id'">Next Month</button>
                        <button type="button" class="btn btn-primary" style="float: right; margin-left: 10px;" onclick="location.href='?handler=PreviousMonth&id=@Model.objAvailability.Id'">Previous Month</button>               
                        <button type="button" class="btn btn-secondary" style="float: right;" onclick="location.href='?handler=TodayMonth&id=@Model.objAvailability.Id'">Today</button>
                        <h3>@Model.CurrentMonthName @Model.CurrentDate.Year</h3>
                        <table id="monthly-calendar" class="calendar">
                            <thead>
                                <tr class="month-header">
                                    @for (int i = 0; i < 7; i++)
                                    {
                                        <th class="day-header">
                                            @CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName((DayOfWeek)((firstDayOfWeek + i) % 7))
                                        </th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                            @for (int i = 0; i < leadingDays + daysInMonth; i++)
                            {
                                if (i % 7 == 0)
                                {
                                    @:<tr class="week-row">
                                }

                                if (i < leadingDays)
                                {
                                    <td class="empty-day"></td>
                                }
                                else
                                {
                                    var currentDay = firstDayOfMonth.AddDays(i - leadingDays);
                                    <td class="month-day @(currentDay.Date == DateTime.Today.Date ? "today" : "")">
                                        @currentDay.Day
                                        <!--Bookings-->
                                        @foreach(var booking in Model.ViewBookings.Where(b => b.StartTime.Date == currentDay))
                                        {
                                            string style = "";
                                            string textColor = "black";
                                            if (booking.CategoryID != null)
                                            {
                                                var color = Model.GetBookingColors(booking.CategoryID);
                                                style = $"background-color: {color}; border: 4px solid #4C0E7D;";
                                                textColor = Model.GetTextColor(color);
                                                style += ");";
                                            }
                                            else
                                            {
                                                var color = "#4C0E7D";
                                                style = $"background-color: {color}; border: 4px solid #000000;";
                                                textColor = Model.GetTextColor(color);
                                                style += ");";
                                            }
                                            <div class="card mb-3" style="@style; color: @textColor;">
                                                    <div class="card-header">@booking.Subject</div>
                                                    <div class="card-body">
                                                        @booking.StartTime.ToShortTimeString()
                                                        @Model.GetUserName(booking.User)
                                                    </div>
                                                </div> 

                                            @* <div class="booking-event" style="background-color: grey; color: white; cursor: pointer;"
                                                 onclick="showBookingDetails('@booking.Subject', '@booking.StartTime.ToString("dddd, MMMM dd, yyyy HH:mm")')">
                                              @booking.Subject @booking.StartTime.ToString("HH:mm") - @booking.StartTime.AddMinutes(booking.Duration).ToString("HH:mm")
                                            </div> *@
                                        }
                                        <!-- Display availabilities for the day -->    
                                        @foreach(var availability in Model.Availabilities.Where(a => a.StartTime.Date == currentDay && !Model.IsAvailabilityBooked(a)))
                                        {
                                            var categoryColors = Model.GetCategoryColors(availability.Category);
                                            string style = "";
                                            string textColor = "black";
                                            if (categoryColors.Count == 1)
                                            {
                                                var color = categoryColors.First();
                                                style = $"background-color: {color};";
                                                textColor = Model.GetTextColor(color);
                                            }
                                            else if (categoryColors.Count > 1)
                                            {
                                                int colorCount = categoryColors.Count;
                                                float percentagePerColor = 100f / colorCount;
                                                style = "background: repeating-linear-gradient(to right, ";

                                                for (int j = 0; j < colorCount; j++)
                                                {
                                                    var color = categoryColors[j];
                                                    var startPercent = j * percentagePerColor;
                                                    var endPercent = (j + 1) * percentagePerColor;
                                                    style += $"{color} {startPercent}%, {color} {endPercent}%";
                                                    if (j < colorCount - 1)
                                                    {
                                                        style += ", ";
                                                    }
                                                }
                                                style += ");";
                                                textColor = Model.GetTextColor(categoryColors[0]);
                                            }
                                            
                                                <div class="card mb-3" style="@style; color: @textColor;">
                                                    <div class="card-header">Available</div>
                                                    <div class="card-body">
                                                        @availability.StartTime.ToString("HH:mm") - @availability.EndTime.ToString("HH:mm")
                                                    </div>
                                                </div>

                                        }
                                        </td>
                                }

                                if ((i + 1) % 7 == 0)
                                {
                                    @:</tr>
                                }
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js"></script>
    <!--Tab switching-->
    <script>
    // Handle the tab switching
        document.querySelectorAll('.nav-link').forEach(function(navLink) {
            navLink.addEventListener('click', function(e) {
                let currentTab = new bootstrap.Tab(navLink);
                currentTab.show();

                let availabilityId = '@Model.objAvailability.Id';
                let handler = (navLink.id === 'weekly-tab') ? 'TodayWeek' : 'TodayMonth';
                let urlParams = new URLSearchParams(window.location.search);
            
                urlParams.set('handler', handler);
            
                // Check if valid ID
                if (availabilityId && availabilityId !== '0') {
                    urlParams.set('id', availabilityId);
                } else {
                    urlParams.delete('id'); // Make sure to remove id if it's not valid
                }

                // Construct the URL
                let url = `${window.location.pathname}?${urlParams.toString()}`;
                window.location.href = url;
                e.preventDefault();
            });
        });

        // Original code to set the active tab on page load based on TempData
        document.addEventListener('DOMContentLoaded', (event) => {
            let activeTab = '@TempData["ActiveTab"]';
            if (activeTab === "monthly") {
                new bootstrap.Tab(document.querySelector('#monthly-tab')).show();
            } else {
                new bootstrap.Tab(document.querySelector('#weekly-tab')).show();
            }
        });
    </script>
    <!--Recurring -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            function toggleRecurringEndDate() {
                var recurringCheckbox = document.getElementById('recurringCheckbox');
                var recurringEndDateGroup = document.getElementById('recurringEndDateGroup');
                var recurringTypeGroup = document.getElementById('recurringTypeGroup');

                if (recurringCheckbox.checked) {
                    recurringEndDateGroup.style.display = 'block';
                    recurringTypeGroup.style.display = 'block';
                } else {
                    recurringEndDateGroup.style.display = 'none';
                    recurringTypeGroup.style.display = 'none';
                    // Clear the value of the recurring end date when the checkbox is unchecked
                    recurringEndDateInput.value = '';
                }
            }

            var recurringCheckbox = document.getElementById('recurringCheckbox');
            recurringCheckbox.addEventListener('change', toggleRecurringEndDate);

            // reload page if recurring is checked when editing
            toggleRecurringEndDate();
        });
    </script>
    <!--Duration/ EndTime-->
    <script>
        function updateEndTimeOnStartTimeChange() {
            var startTimeInput = document.getElementById('MeetingStartTime');
            var endTimeInput = document.getElementById('MeetingEndTime');
            var durationSelect = document.getElementById('duration');

            if (startTimeInput.value) {
                var startTime = new Date('1970-01-01T' + startTimeInput.value + 'Z');
                var existingEndTime = new Date('1970-01-01T' + endTimeInput.value + 'Z');

                // Check if end time is less than 30 minutes after start time
                if (existingEndTime - startTime < 30 * 60000) {
                    var updatedEndTime = new Date(startTime.getTime() + 30 * 60000);
                    endTimeInput.value = updatedEndTime.toISOString().slice(11, 16); // Update the end time
                }

                // Update duration based on the new end time
                updateDurationBasedOnEndTime();
            }
        }

        // Update EndTime by Duration
        function updateEndTimeBasedOnDuration() {
            var startTimeInput = document.getElementById('MeetingStartTime');
            var durationSelect = document.getElementById('duration');
            var endTimeInput = document.getElementById('MeetingEndTime');

            if(startTimeInput.value && durationSelect.value) {
                var startTime = startTimeInput.valueAsDate || new Date('1970-01-01T' + startTimeInput.value + 'Z');
                var duration = parseInt(durationSelect.value);
                var endTime = new Date(startTime.getTime() + duration * 60000);
                endTimeInput.value = endTime.toISOString().slice(11, 16); // Updates the end time
            }
        }
        function updateDurationBasedOnEndTime() {
            var startTimeInput = document.getElementById('MeetingStartTime');
            var endTimeInput = document.getElementById('MeetingEndTime');
            var durationSelect = document.getElementById('duration');

            if (startTimeInput.value && endTimeInput.value) {
                var startTime = new Date('1970-01-01T' + startTimeInput.value + 'Z');
                var endTime = new Date('1970-01-01T' + endTimeInput.value + 'Z');
                var durationInMinutes = (endTime - startTime) / 60000;
        
                durationSelect.value = durationInMinutes.toString();
            }
        }

        // Event listener
        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('MeetingStartTime').addEventListener('change', updateEndTimeOnStartTimeChange);
            document.getElementById('MeetingEndTime').addEventListener('change', updateDurationBasedOnEndTime);
            document.querySelector('#duration').addEventListener('change', updateEndTimeBasedOnDuration);
        });
    </script>
    <!--Show Booking Details-->
    <script>
        function showBookingDetails(subject, startTime) {
            var modalBody = document.querySelector('#bookingDetailsModal .modal-body');
            modalBody.innerHTML = `<p><strong>Subject:</strong> ${subject}</p><p><strong>Start Time:</strong> ${startTime}</p>`;
            var bookingDetailsModal = new bootstrap.Modal(document.getElementById('bookingDetailsModal'));
            bookingDetailsModal.show();
        }
    </script>

    <script>
        document.querySelector('form').addEventListener('submit', function (e) {
            let checkboxes = document.querySelectorAll('input[name="SelectedDaysOfWeek"]:checked');
            if (checkboxes.length === 0) {
                alert('Please select at least one day of the week.');
                e.preventDefault();
            }
        });
    </script>
    <!--Sweet Alert-->
    <script>
    $(document).ready(function() {
        var formStatus = '@TempData["FormStatus"]';
        var errorMessage = '@TempData["ErrorMessage"]';

        if (formStatus === "Failed" && errorMessage) {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: errorMessage,
            });
        }
    });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var multipleDaysCheckbox = document.getElementById('multipleDaysCheckbox');
            var daysOfWeekGroup = document.getElementById('daysOfWeekGroup');

            function toggleDaysOfWeek() {
                daysOfWeekGroup.style.display = multipleDaysCheckbox.checked ? 'block' : 'none';
            }

            multipleDaysCheckbox.addEventListener('change', toggleDaysOfWeek);

            toggleDaysOfWeek();
        });
        </script>
    <!--Categories-->
    <script>
        document.getElementById('addCategoryButton').addEventListener('click', function() {
            var categoryName = document.getElementById('newCategoryName').value;
            var categoryColor = document.getElementById('newCategoryColor').value;
            Model.CreateCategory(categoryName, categoryColor);

            var container = document.getElementById('newCategoryContainer');

            var newCategoryDiv = document.createElement('div');
            newCategoryDiv.className = 'form-check form-check-inline';
            newCategoryDiv.innerHTML = `<input class="form-check-input" type="checkbox" id="category-${category.Id}" name="objAvailability.Category" value="${category.Id}">
                                        <label class="form-check-label" for="category-${category.Id}" style="background-color:${category.Color};">${category.Name}</label>`;

            // Append the new category to the container
            container.appendChild(newCategoryDiv);

            document.getElementById('newCategoryName').value = '';
            document.getElementById('newCategoryColor').value = '';
        });
    </script>
}